
///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЗАПУСКОМ КОМАНД 1С:Предприятия 8
//

Перем мКонтекстКоманды;
Перем мКаталогСборки;
Перем мВыводКоманды;

Перем юТест;

Перем ПутьКПлатформе1С Экспорт;

//////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура УстановитьКонтекст(Знач СтрокаСоединения, Знач Пользователь, Знач Пароль) Экспорт
	мКонтекстКоманды.КлючСоединенияСБазой = СтрокаСоединения;
	мКонтекстКоманды.ИмяПользователя = Пользователь;
	мКонтекстКоманды.Пароль = Пароль;
КонецПроцедуры

Функция ПолучитьВерсиюИзХранилища(Знач СтрокаСоединения, Знач ПользовательХранилища, Знач ПарольХранилища, Знач НомерВерсии = Неопределено) Экспорт
	
	ПроверитьПлатформуИВременныйКонтекст();
	
	Параметры = СтандартныеПараметрыЗапускаКонфигуратора();
	
	Параметры.Добавить("/ConfigurationRepositoryF """+СтрокаСоединения+"""");
	Параметры.Добавить("/ConfigurationRepositoryN """+ПользовательХранилища+"""");
	
	Если Не ПустаяСтрока(ПарольХранилища) Тогда
		Параметры.Добавить("/ConfigurationRepositoryP """+ПарольХранилища+"""");
	КонецЕсли;
	
	Если Не ПустаяСтрока(НомерВерсии) Тогда
		Параметры.Добавить("-v "+НомерВерсии);
	КонецЕсли;
	
	ФайлРезультата = КаталогСборки()+"\source.cf";
	
	Параметры.Добавить("/ConfigurationRepositoryDumpCfg """+ФайлРезультата + """");
	
	КодВозврата = ЗапуститьИПодождать(Параметры);
	Если КодВозврата <> 0 Тогда
		УстановитьВывод(ПрочитатьФайлИнформации());
		ВызватьИсключение(ВыводКоманды());
	КонецЕсли;
	
	Возврат ФайлРезультата;
	
КонецФункции

Процедура ОбновитьКонфигурациюБазыДанных() Экспорт
	
	ПараметрыСвязиСБазой = СтандартныеПараметрыЗапускаКонфигуратора();
	ПараметрыСвязиСБазой.Добавить("/UpdateDBCfg -Server");
	
	КодВозврата = ЗапуститьИПодождать(ПараметрыСвязиСБазой);
	УстановитьВывод(ПрочитатьФайлИнформации());
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение ВыводКоманды();
	КонецЕсли;
	
КонецПроцедуры

Функция ПутьКВременнойБазе() Экспорт
	Возврат КаталогСборки() + "\v8r_TempDB";
КонецФункции

Функция ПолучитьПутьКВерсииПлатформы(Знач ВерсияПлатформы) Экспорт

	Если Лев(ВерсияПлатформы, 2) <> "8." Тогда
		ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
	КонецЕсли;	
	
	путьProgramFiles = "C:\Program Files (x86)\";
	файлProgramFiles = Новый Файл(путьProgramFiles);
	Если Не файлProgramFiles.Существует() Тогда
		путьProgramFiles = "C:\Program Files\";
		файлProgramFiles = Новый Файл(путьProgramFiles);
		Если Не файлProgramFiles.Существует() Тогда
			ВызватьИсключение "Должен существовать путь к Program Files или Program Files (86)";
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСтрок = РазложитьСтрокуВМассивПодстрок(ВерсияПлатформы, ".");
	Если СписокСтрок.Количество() < 2 Тогда
		ВызватьИсключение "Маска версии платформы должна содержать, как минимум, минорную и мажорную версию, т.е. Maj.Min[.Release][.Build]";
	КонецЕсли;
	
	МажорнаяВерсия = СписокСтрок[0];
	МинорнаяВерсия = СписокСтрок[1];
	
	Если МинорнаяВерсия = "3" Тогда // 8.3
		путьКПлатформе = путьProgramFiles + "1cv8\";
	ИначеЕсли МинорнаяВерсия = "2" Тогда // 8.2
		путьКПлатформе = путьProgramFiles + "1cv82\";	
	ИначеЕсли МинорнаяВерсия = "1" Тогда // 8.1
		путьКПлатформе = путьProgramFiles + "1cv81\";
	Иначе
		ВызватьИсключение "Неверная версия платформы <"+ВерсияПлатформы+">";
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(путьКПлатформе, версияПлатформы+"*");
	Если МассивФайлов.Количество() = 0 Тогда
		парамОписаниеОшибки = "Не найден путь к платформе 1С <"+версияПлатформы+">";
		Возврат "";
	КонецЕсли;
	
	ИменаВерсий = Новый Массив;
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		правыйСимвол = Прав(ЭлементМассива.Имя,1);
		Если правыйСимвол < "0" или правыйСимвол > "9" Тогда
			Продолжить;
		КонецЕсли;
		ИменаВерсий.Добавить(ЭлементМассива.Имя);
	КонецЦикла;
	
	МаксВерсия = ИменаВерсий[0];
	Для Сч = 1 По ИменаВерсий.Количество()-1 Цикл
		Если МаксВерсия < ИменаВерсий[Сч] Тогда
			МаксВерсия = ИменаВерсий[Сч];
		КонецЕсли;
	КонецЦикла;
	
	НужныйПуть = Новый Файл(путьКПлатформе + МаксВерсия + "\bin\1cv8.exe");
	Если Не НужныйПуть.Существует() Тогда
		ВызватьИсключение "Ошибка определения версии платформы. Файл <"+НужныйПуть.ПолноеИмя+"> не существует";
	КонецЕсли;
	
	Возврат НужныйПуть.ПолноеИмя;
	
КонецФункции

Процедура КлючРазрешенияЗапуска(Знач Ключ) Экспорт
	мКонтекстКоманды.КлючРазрешенияЗапуска = "/UC""" + Ключ + """";
КонецПроцедуры

Функция ВыводКоманды() Экспорт
	Возврат мВыводКоманды;
КонецФункции

Функция КаталогСборки(Знач Каталог = "") Экспорт
	
	Если мКаталогСборки = Неопределено Тогда
		мКаталогСборки = ТекущийКаталог();
	КонецЕсли;
	
	Если Каталог = "" Тогда
		Возврат мКаталогСборки;
	Иначе
		ТекКаталог = мКаталогСборки;
		мКаталогСборки = Каталог;
		Возврат ТекКаталог;
	КонецЕсли;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция СтандартныеПараметрыЗапускаКонфигуратора()

	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("DESIGNER");
	ПараметрыЗапуска.Добавить(мКонтекстКоманды.КлючСоединенияСБазой);
	ПараметрыЗапуска.Добавить("/Out""" + ФайлИнформации() + """");
	Если Не ПустаяСтрока(мКонтекстКоманды.ИмяПользователя) Тогда
		ПараметрыЗапуска.Добавить("/N""" + мКонтекстКоманды.ИмяПользователя + """");
	КонецЕсли;
	Если Не ПустаяСтрока(мКонтекстКоманды.Пароль) Тогда
		ПараметрыЗапуска.Добавить("/P""" + мКонтекстКоманды.ИмяПользователя + """");
	КонецЕсли;
	ПараметрыЗапуска.Добавить("/WA+");
	Если Не ПустаяСтрока(мКонтекстКоманды.КлючРазрешенияЗапуска) Тогда
		ПараметрыЗапуска.Добавить("/UC""" + мКонтекстКоманды.КлючРазрешенияЗапуска + """");
	КонецЕсли;
	ПараметрыЗапуска.Добавить("/DisableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
	
	Возврат ПараметрыЗапуска;

КонецФункции

Процедура ПроверитьПлатформуИВременныйКонтекст()

	Если Не ЗначениеЗаполнено(ЭтотОбъект.ПутьКПлатформе1С) Тогда
		ВызватьИсключение "Не задан путь к платформе 1С";
	КонецЕсли;
	
	Если мКонтекстКоманды.КлючСоединенияСБазой = КлючВременногоКонтекста() и Не ВременнаяБазаСуществует() Тогда
		СоздатьВременнуюБазу();
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьВременнуюБазу()

	КаталогВременнойБазы = ПутьКВременнойБазе();
	ОбеспечитьКаталог(КаталогВременнойБазы);
	УдалитьФайлы(КаталогВременнойБазы, "*.*");
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить("File="""+КаталогВременнойБазы+""";");
	ПараметрыЗапуска.Добавить("/Out""" + ФайлИнформации() + """");
	
	КодВозврата = ЗапуститьИПодождать(ПараметрыЗапуска);
	УстановитьВывод(ПрочитатьФайлИнформации());
	Если КодВозврата <> 0 Тогда
		ВызватьИсключение ВыводКоманды();
	КонецЕсли;

КонецПроцедуры

Функция ЗапуститьИПодождать(Знач Параметры)

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из Параметры Цикл
	
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
		
		Если Лев(Параметр,2) <> "/P" и Лев(Параметр,25) <> "/ConfigurationRepositoryP" Тогда
			СтрокаДляЛога = СтрокаДляЛога + " " + Параметр;
		КонецЕсли;
	
	КонецЦикла;

	КодВозврата = 0;
	
	Приложение = """" + ЭтотОбъект.ПутьКПлатформе1С + """";
	Сообщить(Приложение + СтрокаДляЛога);
	
	ЗапуститьПриложение(Приложение + СтрокаЗапуска, , Истина, КодВозврата);
	
	Возврат КодВозврата;

КонецФункции

Функция ПрочитатьФайлИнформации()

	Текст = "";

	Файл = Новый Файл(ФайлИнформации());
	Если Файл.Существует() Тогда
		Чтение = Новый ЧтениеТекста(Файл.ПолноеИмя);
		Текст = Чтение.Прочитать();
		Чтение.Закрыть();
	Иначе
		Текст = "Информации об ошибке нет";
	КонецЕсли;

	Возврат Текст;
	
КонецФункции

Процедура УстановитьВывод(Знач Сообщение)
	мВыводКоманды = Сообщение;
КонецПроцедуры

Функция ФайлИнформации()
	Возврат КаталогСборки() + "\log.txt";
КонецФункции

Процедура ОбеспечитьКаталог(Знач Каталог)

	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;

КонецПроцедуры

Функция КлючВременногоКонтекста()
	Возврат "/F""" + ПутьКВременнойБазе() + """";
КонецФункции

Функция ВременнаяБазаСуществует()
	ФайлБазы = Новый Файл(ПутьКВременнойБазе() + "\1cv8.1cd");
	Возврат ФайлБазы.Существует();
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(ИсходнаяСтрока, Разделитель)

	МассивПодстрок = Новый Массив;
	ОстатокСтроки = ИсходнаяСтрока;
	
	Поз = -1;
	Пока Поз <> 0 Цикл
	
		Поз = Найти(ОстатокСтроки, Разделитель);
		Если Поз > 0 Тогда
			Подстрока = Лев(ОстатокСтроки, Поз-1);
			ОстатокСтроки = Сред(ОстатокСтроки, Поз+1);
		Иначе
			Подстрока = ОстатокСтроки;
		КонецЕсли;
		
		МассивПодстрок.Добавить(Подстрока);
	
	КонецЦикла;
	
	Возврат МассивПодстрок;

КонецФункции

Процедура Инициализация()

	мКонтекстКоманды = Новый Структура;
	мКонтекстКоманды.Вставить("КлючСоединенияСБазой", "");
	мКонтекстКоманды.Вставить("ИмяПользователя", "");
	мКонтекстКоманды.Вставить("Пароль", "");
	мКонтекстКоманды.Вставить("КлючРазрешенияЗапуска", "");
	
	УстановитьКонтекст(КлючВременногоКонтекста(), "", "");
	ЭтотОбъект.ПутьКПлатформе1С = ПолучитьПутьКВерсииПлатформы("8.3");

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////////
// Тестирование

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ИзменитьКаталогСборки");
	СписокТестов.Добавить("ТестДолжен_СоздатьВременнуюБазу");
	
	Возврат СписокТестов;
	
КонецФункции

Процедура ТестДолжен_ИзменитьКаталогСборки() Экспорт
	
	ПоУмолчанию = ТекущийКаталог();
	юТест.ПроверитьРавенство(КаталогСборки(), ПоУмолчанию, "По умолчанию каталог сборки должен совпадать с текущим каталогом");
	
	СтароеЗначение = КаталогСборки(КаталогВременныхФайлов());
	юТест.ПроверитьРавенство(СтароеЗначение, ПоУмолчанию, "Предыдущее значение каталога должно возвращяться при его смене");
	юТест.ПроверитьРавенство(КаталогСборки(), КаталогВременныхФайлов(), "Каталог сборки должен быть изменен");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьВременнуюБазу() Экспорт
	
	Если ВременнаяБазаСуществует() Тогда
		УдалитьФайлы(ПутьКВременнойБазе());
	КонецЕсли;
	
	юТест.ПроверитьЛожь(ВременнаяБазаСуществует(), "Временной базы не должно быть в каталоге <"+ПутьКВременнойБазе()+">");
	СоздатьВременнуюБазу();
	Сообщить(ВыводКоманды());
	юТест.ПроверитьИстину(ВременнаяБазаСуществует(), "Временная база должна существовать");
	УдалитьФайлы(ПутьКВременнойБазе());
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// Инициализация

Инициализация();